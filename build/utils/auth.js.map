{"version":3,"sources":["../../src/server/utils/auth.js"],"names":["newToken","user","jwt","sign","id","email","config","secrets","expiresIn","jwtExp","verifyToken","token","Promise","resolve","reject","verify","err","payload","signup","req","res","body","password","status","send","message","User","create","console","error","end","signin","invalid","findOne","select","exec","checkPassword","match","protect","next","bearer","headers","authorization","startsWith","log","split","trim","findById","lean"],"mappings":"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","sourcesContent":["import config from '../config';\r\nimport { User } from '../api/user/user.model';\r\nimport jwt from 'jsonwebtoken';\r\n\r\nexport const newToken = user => {\r\n  return jwt.sign({ id: user.id, email: user.email }, config.secrets.jwt, {\r\n    expiresIn: config.secrets.jwtExp\r\n  });\r\n};\r\n\r\nexport const verifyToken = token =>\r\n  new Promise((resolve, reject) => {\r\n    jwt.verify(token, config.secrets.jwt, (err, payload) => {\r\n      if (err) return reject(err);\r\n      resolve(payload);\r\n    });\r\n  });\r\n\r\nexport const signup = async (req, res) => {\r\n  if (!req.body.email || !req.body.password) {\r\n    return res.status(400).send({ message: 'need email and password' });\r\n  }\r\n\r\n  try {\r\n    const user = await User.create(req.body);\r\n    const token = newToken(user);\r\n    return res.status(201).send({ token });\r\n  } catch (e) {\r\n    console.error(e);\r\n    return res.status(500).end();\r\n  }\r\n};\r\n\r\nexport const signin = async (req, res) => {\r\n  if (!req.body.email || !req.body.password) {\r\n    return res.status(400).send({ message: 'need email and password' });\r\n  }\r\n\r\n  const invalid = { message: 'Invalid email and passoword combination' };\r\n\r\n  try {\r\n    const user = await User.findOne({ email: req.body.email })\r\n      .select('email password')\r\n      .exec();\r\n\r\n    if (!user) {\r\n      return res.status(401).send(invalid);\r\n    }\r\n\r\n    const match = await user.checkPassword(req.body.password);\r\n\r\n    if (!match) {\r\n      return res.status(401).send(invalid);\r\n    }\r\n\r\n    const token = newToken(user);\r\n    return res.status(201).send({ token });\r\n  } catch (e) {\r\n    console.error(e);\r\n    res.status(500).end();\r\n  }\r\n};\r\n\r\nexport const protect = async (req, res, next) => {\r\n  const bearer = req.headers.authorization;\r\n\r\n  if (!bearer || !bearer.startsWith('Bearer ')) {\r\n    console.log('no bearer');\r\n    return res.status(401).end();\r\n  }\r\n\r\n  const token = bearer.split('Bearer ')[1].trim();\r\n  let payload;\r\n  try {\r\n    payload = await verifyToken(token);\r\n  } catch (e) {\r\n    console.log(e);\r\n    return res.status(401).end();\r\n  }\r\n\r\n  const user = await User.findById(payload.id)\r\n    .select('-password')\r\n    .lean()\r\n    .exec();\r\n\r\n  if (!user) {\r\n    console.log('no user');\r\n    return res.status(401).end();\r\n  }\r\n\r\n  req.user = user;\r\n  next();\r\n};\r\n"],"file":"auth.js"}