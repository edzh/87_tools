{"version":3,"sources":["../../../src/server/api/user/user.model.js"],"names":["userSchema","mongoose","Schema","email","type","String","required","unique","trim","password","timestamps","pre","next","isModified","bcrypt","hash","err","methods","checkPassword","passwordHash","Promise","resolve","reject","compare","same","User","model"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,kBAASC,MAAb,CACjB;AACEC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAEC,MADD;AAELC,IAAAA,QAAQ,EAAE,IAFL;AAGLC,IAAAA,MAAM,EAAE,IAHH;AAILC,IAAAA,IAAI,EAAE;AAJD,GADT;AAOEC,EAAAA,QAAQ,EAAE;AACRL,IAAAA,IAAI,EAAEC,MADE;AAERC,IAAAA,QAAQ,EAAE;AAFF;AAPZ,CADiB,EAajB;AAAEI,EAAAA,UAAU,EAAE;AAAd,CAbiB,CAAnB;AAgBAV,UAAU,CAACW,GAAX,CAAe,MAAf,EAAuB,UAASC,IAAT,EAAe;AAAA;;AACpC,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOD,IAAI,EAAX;AACD;;AAEDE,kBAAOC,IAAP,CAAY,KAAKN,QAAjB,EAA2B,CAA3B,EAA8B,UAACO,GAAD,EAAMD,IAAN,EAAe;AAC3C,QAAIC,GAAJ,EAAS;AACP,aAAOJ,IAAI,CAACI,GAAD,CAAX;AACD;;AAED,IAAA,KAAI,CAACP,QAAL,GAAgBM,IAAhB;AACAH,IAAAA,IAAI;AACL,GAPD;AAQD,CAbD;;AAeAZ,UAAU,CAACiB,OAAX,CAAmBC,aAAnB,GAAmC,UAAST,QAAT,EAAmB;AACpD,MAAMU,YAAY,GAAG,KAAKV,QAA1B;AACA,SAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCR,oBAAOS,OAAP,CAAed,QAAf,EAAyBU,YAAzB,EAAuC,UAACH,GAAD,EAAMQ,IAAN,EAAe;AACpD,UAAIR,GAAJ,EAAS;AACP,eAAOM,MAAM,CAACN,GAAD,CAAb;AACD;;AAEDK,MAAAA,OAAO,CAACG,IAAD,CAAP;AACD,KAND;AAOD,GARM,CAAP;AASD,CAXD;;AAYO,IAAMC,IAAI,GAAGxB,kBAASyB,KAAT,CAAe,MAAf,EAAuB1B,UAAvB,CAAb","sourcesContent":["import mongoose from 'mongoose';\r\nimport bcrypt from 'bcrypt';\r\n\r\nconst userSchema = new mongoose.Schema(\r\n  {\r\n    email: {\r\n      type: String,\r\n      required: true,\r\n      unique: true,\r\n      trim: true\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: true\r\n    }\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nuserSchema.pre('save', function(next) {\r\n  if (!this.isModified('password')) {\r\n    return next();\r\n  }\r\n\r\n  bcrypt.hash(this.password, 8, (err, hash) => {\r\n    if (err) {\r\n      return next(err);\r\n    }\r\n\r\n    this.password = hash;\r\n    next();\r\n  });\r\n});\r\n\r\nuserSchema.methods.checkPassword = function(password) {\r\n  const passwordHash = this.password;\r\n  return new Promise((resolve, reject) => {\r\n    bcrypt.compare(password, passwordHash, (err, same) => {\r\n      if (err) {\r\n        return reject(err);\r\n      }\r\n\r\n      resolve(same);\r\n    });\r\n  });\r\n};\r\nexport const User = mongoose.model('user', userSchema);\r\n"],"file":"user.model.js"}